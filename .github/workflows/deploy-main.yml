name: Deploy to GCP Instance using SSH

on:
  push:
    branches: [ 'main' ]

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'


      - name: Create application.yml
        run: |
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml, ./src/main/resources/application-gcs.yml, ./src/main/resources/application-youtube.yml
        env:
          spring.datasource.driver-class-name: ${{ secrets.DATASOURCE_DRIVER_CLASS_NAME }}
          spring.datasource.url: ${{ secrets.DATASOURCE_URL }}
          spring.jpa.hibernate.ddl-auto: ${{ secrets.JPA_DDL_AUTO }}

          spring.data.redis.database: ${{ secrets.REDIS_DATABASE }}

          server.port: ${{ secrets.SERVER_PORT }}
          server.ssl.key-store-password: ${{ secrets.KEYSTORE_PASSWORD }}

          jwt.secret: ${{ secrets.JWT_SECRET }}

          spring.cloud.gcp.storage.credentials.location: ${{ secrets.GCS_KEY_LOCATION }}
          spring.cloud.gcp.storage.project-id: ${{ secrets.GCS_PROJECT_ID }}
          spring.cloud.gcp.storage.bucket-name: ${{ secrets.GCS_BUCKET_NAME }}
          spring.cloud.gcp.storage.bucket-dir: ${{ secrets.GCS_BUCKET_DIR }}
          spring.cloud.gcp.storage.key-name: ${{ secrets.GCS_KEY_NAME }}

          youtube.api-key1: ${{ secrets.YOUTUBE_API_KEY_1 }}
          youtube.api-key2: ${{ secrets.YOUTUBE_API_KEY_2 }}
          youtube.api-key3: ${{ secrets.YOUTUBE_API_KEY_3 }}
          youtube.api-key4: ${{ secrets.YOUTUBE_API_KEY_4 }}
          youtube.api-key5: ${{ secrets.YOUTUBE_API_KEY_5 }}
          youtube.api-key6: ${{ secrets.YOUTUBE_API_KEY_6 }}
          youtube.api-key7: ${{ secrets.YOUTUBE_API_KEY_7 }}
          youtube.api-key8: ${{ secrets.YOUTUBE_API_KEY_8 }}
          youtube.api-key9: ${{ secrets.YOUTUBE_API_KEY_9 }}
          youtube.api-key10: ${{ secrets.YOUTUBE_API_KEY_10 }}
          youtube.api-key11: ${{ secrets.YOUTUBE_API_KEY_11 }}
          youtube.api-key12: ${{ secrets.YOUTUBE_API_KEY_12 }}
          youtube.api-key13: ${{ secrets.YOUTUBE_API_KEY_13 }}
          youtube.api-key14: ${{ secrets.YOUTUBE_API_KEY_14 }}

      - name: Create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: ${{ secrets.GCS_KEY_NAME }}
          json: ${{ secrets.GCS_KEY_JSON }}
          dir: ${{ secrets.GCS_KEY_DIR_LOCATION }}

      - name: Keystore Save
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode > ./src/main/resources/keystore.p12

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build
        run: |
          docker build -t ${{ secrets.APPLICATION_NAME }} .
          docker tag ${{ secrets.APPLICATION_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:${GITHUB_SHA::7}
          docker tag ${{ secrets.APPLICATION_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker system prune -a
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest
            docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest ${{ secrets.APPLICATION_NAME }}-server
            
            if [ "$(docker ps -aq -f name=${{ secrets.APPLICATION_NAME }}-server)" ]
            then
              echo "[ ${{ secrets.APPLICATION_NAME }}-server is running ]"
              docker stop ${{ secrets.APPLICATION_NAME }}-server
              docker rm ${{ secrets.APPLICATION_NAME }}-server
            else
              echo "[ ${{ secrets.APPLICATION_NAME }}-server is not running ]"
            fi
            
            docker run -d --name ${{ secrets.APPLICATION_NAME }}-server -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} ${{ secrets.APPLICATION_NAME }}-server